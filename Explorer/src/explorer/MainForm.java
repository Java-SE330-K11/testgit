/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package explorer;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;
import java.text.DateFormat;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Icon;
import javax.swing.JTable;
import javax.swing.JTree;
import javax.swing.event.TreeSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;
import org.apache.commons.io.FileUtils;
import javax.swing.tree.DefaultTreeSelectionModel;
/**
 *
 * @author User
 */
public class MainForm extends javax.swing.JFrame {

    String[] tmpS;
    String tmpF;
    private boolean coppy = true;
    private boolean cut = false;
    private File fileCoppyPath;
    private File filePatsePath;
    
    
    private File[] paths;
    private DefaultMutableTreeNode saveSelectedNode=null;
    public MainForm() {
        initComponents();
    }
    class Render extends DefaultTableCellRenderer{
        Map<Integer,Icon> icons;
        Map<Integer,String> str;
    public Render(Map<Integer,Icon> icons,Map<Integer,String> str) { 
        this.icons=icons;
        this.str=str;
    }
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column)
        {
            super.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
            this.setOpaque(true);
            this.setIcon(icons.get(row));
        this.setText(str.get(row));
        this.setBackground(Color.WHITE);
        if (isSelected)
        {
            setBackground(table.getSelectionBackground());
        }
        else
        {
            setBackground(table.getBackground());
        }
        return this;
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        btnCopy = new javax.swing.JButton();
        btnCut = new javax.swing.JButton();
        btnPaste = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        btnView = new javax.swing.JButton();
        jToolBar2 = new javax.swing.JToolBar();
        btnBack = new javax.swing.JButton();
        btnForward = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnUp = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        lbAddress = new javax.swing.JLabel();
        textAddress = new javax.swing.JTextField();
        btnGoto = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tree = new javax.swing.JTree();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        itemNew = new javax.swing.JMenu();
        itemFolder = new javax.swing.JMenuItem();
        itemRename = new javax.swing.JMenuItem();
        itemDelete = new javax.swing.JMenuItem();
        itemExit = new javax.swing.JMenuItem();
        Edit = new javax.swing.JMenu();
        itemCopy = new javax.swing.JMenuItem();
        itemCut = new javax.swing.JMenuItem();
        itemPaste = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        itemSellectAll = new javax.swing.JMenuItem();
        View = new javax.swing.JMenu();
        Help = new javax.swing.JMenu();
        itemAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jToolBar1.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar1.setRollover(true);
        jToolBar1.setEnabled(false);

        btnCopy.setBackground(new java.awt.Color(255, 255, 255));
        btnCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/copy.png"))); // NOI18N
        btnCopy.setText("Copy");
        btnCopy.setFocusable(false);
        btnCopy.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCopy.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCopy.setMinimumSize(new java.awt.Dimension(70, 40));
        btnCopy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCopyMouseClicked(evt);
            }
        });
        jToolBar1.add(btnCopy);

        btnCut.setBackground(new java.awt.Color(255, 255, 255));
        btnCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/cut.png"))); // NOI18N
        btnCut.setText("Cut");
        btnCut.setFocusable(false);
        btnCut.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnCut.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnCut.setMinimumSize(new java.awt.Dimension(70, 40));
        jToolBar1.add(btnCut);

        btnPaste.setBackground(new java.awt.Color(255, 255, 255));
        btnPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/paste.png"))); // NOI18N
        btnPaste.setText("Paste");
        btnPaste.setFocusable(false);
        btnPaste.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnPaste.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnPaste.setMinimumSize(new java.awt.Dimension(70, 40));
        btnPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPasteActionPerformed(evt);
            }
        });
        jToolBar1.add(btnPaste);

        btnDelete.setBackground(new java.awt.Color(255, 255, 255));
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/delete.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setFocusable(false);
        btnDelete.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDelete.setMinimumSize(new java.awt.Dimension(70, 40));
        jToolBar1.add(btnDelete);

        btnRefresh.setBackground(new java.awt.Color(255, 255, 255));
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/refresh.png"))); // NOI18N
        btnRefresh.setText("Refresh");
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnRefresh.setMinimumSize(new java.awt.Dimension(70, 40));
        jToolBar1.add(btnRefresh);

        btnView.setBackground(new java.awt.Color(255, 255, 255));
        btnView.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/view.png"))); // NOI18N
        btnView.setText("View");
        btnView.setFocusable(false);
        btnView.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnView.setMinimumSize(new java.awt.Dimension(70, 40));
        jToolBar1.add(btnView);

        jToolBar2.setBackground(new java.awt.Color(255, 255, 255));
        jToolBar2.setRollover(true);
        jToolBar2.setEnabled(false);

        btnBack.setBackground(new java.awt.Color(255, 255, 255));
        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/back.png"))); // NOI18N
        btnBack.setFocusable(false);
        btnBack.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnBack.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(btnBack);

        btnForward.setBackground(new java.awt.Color(255, 255, 255));
        btnForward.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/forward.png"))); // NOI18N
        btnForward.setFocusable(false);
        btnForward.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnForward.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(btnForward);
        jToolBar2.add(jSeparator1);

        btnUp.setBackground(new java.awt.Color(255, 255, 255));
        btnUp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/up.png"))); // NOI18N
        btnUp.setFocusable(false);
        btnUp.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUp.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(btnUp);
        jToolBar2.add(jSeparator2);

        lbAddress.setBackground(new java.awt.Color(255, 255, 255));
        lbAddress.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lbAddress.setText("Address:");
        jToolBar2.add(lbAddress);

        textAddress.setMinimumSize(new java.awt.Dimension(600, 22));
        textAddress.setPreferredSize(new java.awt.Dimension(600, 220));
        jToolBar2.add(textAddress);

        btnGoto.setBackground(new java.awt.Color(255, 255, 255));
        btnGoto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/explorer/image/goto.png"))); // NOI18N
        btnGoto.setText("Go to");
        btnGoto.setFocusable(false);
        btnGoto.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jToolBar2.add(btnGoto);

        jSplitPane1.setDividerLocation(250);

        Table.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        Table.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        Table.setFocusable(false);
        Table.setGridColor(new java.awt.Color(255, 255, 255));
        Table.setRowHeight(22);
        Table.getTableHeader().setReorderingAllowed(false);
        Table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(Table);

        jSplitPane1.setRightComponent(jScrollPane2);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        Tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        Tree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(Tree);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jMenuBar1.setPreferredSize(new java.awt.Dimension(148, 35));

        File.setText("File");
        File.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        File.setName("File"); // NOI18N

        itemNew.setText("New");
        itemNew.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemFolder.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        itemFolder.setText("Folder");
        itemNew.add(itemFolder);

        File.add(itemNew);

        itemRename.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        itemRename.setText("Rename        F2");
        File.add(itemRename);

        itemDelete.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        itemDelete.setText("Delete          Del");
        File.add(itemDelete);

        itemExit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        itemExit.setText("Exit           Alt+F4");
        File.add(itemExit);

        jMenuBar1.add(File);

        Edit.setText("Edit");
        Edit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemCopy.setText("Copy               Ctrl+C");
        Edit.add(itemCopy);

        itemCut.setText("Cut                  Ctrl+X");
        Edit.add(itemCut);

        itemPaste.setText("Paste               Ctrl+V");
        Edit.add(itemPaste);
        Edit.add(jSeparator3);

        itemSellectAll.setText("Sellect All       Ctrl+A");
        Edit.add(itemSellectAll);

        jMenuBar1.add(Edit);

        View.setText("View");
        View.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        jMenuBar1.add(View);

        Help.setText("Help");
        Help.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N

        itemAbout.setText("About");
        Help.add(itemAbout);

        jMenuBar1.add(Help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 911, Short.MAX_VALUE)
            .addComponent(jSplitPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
        loadTree();
        loadTable();
    }//GEN-LAST:event_formWindowOpened

    private void TreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TreeMouseClicked
        if(saveSelectedNode!=null)
        {
            if(saveSelectedNode==(DefaultMutableTreeNode)Tree.getLastSelectedPathComponent())
                return;
        }
        //lấy node được chọn
        DefaultMutableTreeNode selectedNode=(DefaultMutableTreeNode)Tree.getLastSelectedPathComponent();
        //if(selectedNode!=null) 
          selectedNode.removeAllChildren();
      
        java.io.File selectedFile =(java.io.File)selectedNode.getUserObject();
        java.io.File[] paths=selectedFile.listFiles();
        DefaultTreeModel model=(DefaultTreeModel)Tree.getModel();
        for(File path:paths)
            if(path.isDirectory())
            {
                selectedNode.add(new DefaultMutableTreeNode(path));
            }
        ShowInTable(paths);
        saveSelectedNode=selectedNode;
   
        Tree.expandPath(Tree.getLeadSelectionPath());
    }//GEN-LAST:event_TreeMouseClicked

    private static void copyFileUsingApacheCommonsIO(File source, File dest) throws IOException {
        FileUtils.copyFile(source, dest);
    }
    
    public static void copyFolder(File src, File dest)
    	throws IOException{
    	
    	if(src.isDirectory()){
    		
    		//if directory not exists, create it
    		if(!dest.exists()){
    		   dest.mkdir();
    		   System.out.println("Directory copied from " 
                              + src + "  to " + dest);
    		}
    		
    		//list all the directory contents
    		String files[] = src.list();
    		
    		for (String file : files) {
    		   //construct the src and dest file structure
    		   File srcFile = new File(src, file);
    		   File destFile = new File(dest, file);
    		   //recursive copy
    		   copyFolder(srcFile,destFile);
    		}
    	   
    	}else{
    		//if file, then copy it
    		//Use bytes stream to support all file types
    		InputStream in = new FileInputStream(src);
    	        OutputStream out = new FileOutputStream(dest); 
    	                     
    	        byte[] buffer = new byte[1024];
    	    
    	        int length;
    	        //copy the file content in bytes 
    	        while ((length = in.read(buffer)) > 0){
    	    	   out.write(buffer, 0, length);
    	        }
 
    	        in.close();
    	        out.close();
    	        System.out.println("File copied from " + src + " to " + dest);
    	}
    }
    
    private void btnCopyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCopyMouseClicked
        // TODO add your handling code here:
        String tmp = saveSelectedNode.toString();
        System.out.println(tmp);
        String[] tmpS = tmp.split("\\");
        tmpF = tmpS[tmpS.length-1];
        fileCoppyPath = new File(tmp);
        
    }//GEN-LAST:event_btnCopyMouseClicked

    private void btnPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPasteActionPerformed
        // TODO add your handling code here:
         String tmp = saveSelectedNode.toString();
         tmp = tmp +"\\"+tmpS;
         filePatsePath = new File(tmp);
         if(coppy) 
         {
             try{
             copyFileUsingApacheCommonsIO(fileCoppyPath,filePatsePath);
             }
             catch (IOException e){
                 System.out.println("Nope");
             }
         }
//        File s1 = new File("D:\\Local1\\Test.docx");
//        File s2 = new File("D:\\Local2\\Test.docx");
//        try{
//        FileUtils.copyFile(s1,s2);
//        }
//        catch (IOException e)
//        {
//            System.out.println("Nope");
//        }
    }//GEN-LAST:event_btnPasteActionPerformed

    private void TableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TableMouseClicked
        // TODO add your handling code here:
        
    }//GEN-LAST:event_TableMouseClicked

    
    void ShowInTable(File[] paths)
    {
 
        Map<Integer,Icon> icons=new HashMap<Integer,Icon>();
        Map<Integer,String> str=new HashMap<Integer,String>();
        //Table.re
        int n=paths.length;
        Object row[]=new Object[4];

        DefaultTableModel tableModel=(DefaultTableModel)Table.getModel();
        
        while(tableModel.getRowCount() > 0)
        {
            tableModel.removeRow(0);
        }
        
        for(int i=0;i<n;i++)
            if(paths[i].isDirectory())
            {
                
                Icon ic=FileSystemView.getFileSystemView().getSystemIcon(paths[i]);             
                row[0]=paths[i].getName();
                //System.out.println(paths[i]+"  "+saveSelectedNode.toString());
                Date d = new Date(paths[i].lastModified());
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy   HH:mm:ss");
                String strDate = formatter.format(d);
                row[1]=strDate;
                row[2]="Folder";
                row[3]="N/A";
                tableModel.addRow(row);
            }
        for(int i=0;i<n;i++)
            if(paths[i].isFile())
            {
                //row[0]=paths[i].getName();
                
                Date d = new Date(paths[i].lastModified());
                SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy   HH:mm:ss");
                String strDate = formatter.format(d);
                row[1]=strDate;
                row[2]="File";
                row[3]=paths[i].length()/1000+" KB";
                tableModel.addRow(row);
            }
        for(int i=0;i<n;i++)
        {
            icons.put(i, FileSystemView.getFileSystemView().getSystemIcon(paths[i]));
            str.put(i,paths[i].getName());
            /*String path=paths[i].getAbsolutePath();
            System.out.println(path);*/
        }
        Table.getColumnModel().getColumn(0).setCellRenderer(new Render(icons,str));
    }
    
    private void loadTree()
    {
        paths = java.io.File.listRoots();

        DefaultTreeModel model=(DefaultTreeModel)Tree.getModel();
        DefaultMutableTreeNode ThisPC=(DefaultMutableTreeNode)model.getRoot();
      
        for(File path:paths)
        {
                ThisPC.add(new DefaultMutableTreeNode(path));
                model.reload();
        }
    }
    
    private void loadTable()
    {
        Table.setBackground(Color.WHITE);
        Table.setDefaultEditor(Object.class, null);
        JTableHeader header = Table.getTableHeader();
        header.setPreferredSize(new Dimension(100, 30));
        header.setFont(new Font("",Font.PLAIN,18));
        int n=0;
        Object name[]=new Object[n];
        Object date_modified[]=new Object[n];
        Object type[]=new Object[n];
        Object size[]=new Object[n];
        DefaultTableModel tableModel=(DefaultTableModel)Table.getModel();
        tableModel.addColumn("Name",name);
        tableModel.addColumn("Date modified",date_modified);
        tableModel.addColumn("Type",type);
        tableModel.addColumn("Size",size);
    }
    

    

    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Edit;
    private javax.swing.JMenu File;
    private javax.swing.JMenu Help;
    private javax.swing.JTable Table;
    private javax.swing.JTree Tree;
    private javax.swing.JMenu View;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCopy;
    private javax.swing.JButton btnCut;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnForward;
    private javax.swing.JButton btnGoto;
    private javax.swing.JButton btnPaste;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnUp;
    private javax.swing.JButton btnView;
    private javax.swing.JMenuItem itemAbout;
    private javax.swing.JMenuItem itemCopy;
    private javax.swing.JMenuItem itemCut;
    private javax.swing.JMenuItem itemDelete;
    private javax.swing.JMenuItem itemExit;
    private javax.swing.JMenuItem itemFolder;
    private javax.swing.JMenu itemNew;
    private javax.swing.JMenuItem itemPaste;
    private javax.swing.JMenuItem itemRename;
    private javax.swing.JMenuItem itemSellectAll;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JLabel lbAddress;
    private javax.swing.JTextField textAddress;
    // End of variables declaration//GEN-END:variables

}

